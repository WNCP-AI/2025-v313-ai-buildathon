// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fdqaiwugmumcqfolksrp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZkcWFpd3VnbXVtY3Fmb2xrc3JwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0ODQ4NjAsImV4cCI6MjA3MzA2MDg2MH0.rpcV7aU5H0TU4_simkpg66u-sXFcQVJKL5Kqp8MLSQE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Custom storage adapter that respects "Remember me" preference
const customStorage = {
  getItem: (key: string) => {
    try {
      const remember = (localStorage.getItem('supabase_remember_me') || 'false') === 'true';
      // Read from the chosen storage first; gracefully fall back to the other
      return remember
        ? (localStorage.getItem(key) ?? sessionStorage.getItem(key))
        : (sessionStorage.getItem(key) ?? localStorage.getItem(key));
    } catch {
      return null;
    }
  },
  setItem: (key: string, value: string) => {
    try {
      const remember = (localStorage.getItem('supabase_remember_me') || 'false') === 'true';
      if (remember) {
        localStorage.setItem(key, value);
        sessionStorage.removeItem(key);
      } else {
        sessionStorage.setItem(key, value);
        localStorage.removeItem(key);
      }
    } catch {
      // no-op
    }
  },
  removeItem: (key: string) => {
    try { localStorage.removeItem(key); } catch {}
    try { sessionStorage.removeItem(key); } catch {}
  }
};

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: customStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  }
});